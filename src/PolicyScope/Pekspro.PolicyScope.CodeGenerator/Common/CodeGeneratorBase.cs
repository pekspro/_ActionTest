using System;
using System.Collections.Generic;
using System.Text;

namespace Pekspro.PolicyScope.CodeGenerator.Common
{
    public abstract class CodeGeneratorBase
    {
        public CodeGeneratorBase()
        {

        }

        public int WriteAllFiles(int maxServiceCount)
        {
            int updateCount = 0;

            if(WriteClassFileContent(maxServiceCount))
            {
                updateCount++;
            }

            if(WriteInterfaceFileContent(maxServiceCount))
            {
                updateCount++;
            }

            return updateCount;
        }


        public virtual bool WriteClassFileContent(int maxServiceCount)
        {
            return false;
        }

        public virtual bool WriteInterfaceFileContent(int maxServiceCount)
        {
            return false;
        }

        public static string BaseDirectory = null;

        private static string GetBaseDirectory()
        {
            if(BaseDirectory != null)
            {
                return BaseDirectory;
            }

            BaseDirectory = "./";

            for(int i = 0; i < 8; i++)
            {
                if(System.IO.File.Exists(BaseDirectory + "PolicyScope.sln"))
                {
                    return BaseDirectory;
                }

                BaseDirectory = System.IO.Path.Combine(BaseDirectory, "../");
            }

            throw new Exception("Did not found PolicyScope.sln");
        }

        public bool WriteFileContent(string filename, string fileContent)
        {
            string path = System.IO.Path.Combine(GetBaseDirectory(), "PolicyScope", filename);

            StringBuilder sb = new StringBuilder();
            sb.AppendLine("// This file has been autogenerated via");
            sb.AppendLine("// " + GetType().ToString());
            sb.AppendLine();
            sb.Append(fileContent);

            fileContent = sb.ToString();

            Console.Write($"Updating {path}... ");

            string currentContent = System.IO.File.ReadAllText(path);
            if(currentContent == fileContent)
            {
                Console.WriteLine("File already up to date.");
                return false;
            }
            else
            {
                System.IO.File.WriteAllText(path, fileContent, Encoding.UTF8);
                Console.WriteLine("File updated.");
                return true;
            }
        }

        public const bool GenerateSync = true;

        public List<string> ServicesTypes { get; set; } = new List<string>();

        public List<string> ServicesNames { get; set; } = new List<string>();

        public abstract string GetClassName(CodeNames codeNames);

        public string GetInterfaceName(CodeNames codeNames) => "I" + GetClassName(codeNames);

        public string GetClassNameAndTemplateParamaters(CodeNames codeNames) => GetClassName(codeNames) + codeNames.TemplateParametersAndResult;

        public string GetInterfaceNameAndTemplateParamaters(CodeNames codeNames) => "I" + GetClassNameAndTemplateParamaters(codeNames);
    }
}
