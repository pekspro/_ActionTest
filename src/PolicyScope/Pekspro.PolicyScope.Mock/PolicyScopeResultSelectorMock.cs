// This file has been autogenerated via
// Pekspro.PolicyScope.CodeGenerator.Mock.PolicyScopeResultSelectorMockGenerator

using System.Collections.Generic;
using System.Linq;

namespace Pekspro.PolicyScope.Mock
{
    internal class AsyncPolicyScopeResultSelectorMock : IAsyncPolicyScopeResultSelector
    {
        internal AsyncPolicyScopeResultSelectorMock(IEnumerable<PolicyScopeMockConfiguration> configurations)
        {
            Configurations = configurations;
        }

        internal IEnumerable<PolicyScopeMockConfiguration> Configurations { get; } 

        public IAsyncNoServiceNoResultPolicyScopeRunner WithNoResult()
        {
            var config = Configurations.FirstOrDefault(conf => conf.ReturnType == null);

            if(config == null)
            {
                throw new PolicyScopeMockException($"No matching policy scope mock configuration was found. Found no configuration with no result type.", Configurations);
            }

            return new AsyncNoServiceNoResultPolicyScopeRunnerMock(config);
        }

        public IAsyncNoServiceResultPolicyScopeRunner<TResult> WithResult<TResult>()
        {
            var config = Configurations.FirstOrDefault(conf => conf.ReturnType == typeof(TResult));

            if (config == null)
            {
                throw new PolicyScopeMockException($"No matching policy scope mock configuration was found. Found no configuration with result type {typeof(TResult)}.", Configurations);
            }

            return new AsyncNoServiceResultPolicyScopeRunnerMock<TResult>(config);
        }
    }

    internal class AsyncPolicyScopeResultSelectorMock<T> : IAsyncPolicyScopeResultSelector<T>
    {
        internal AsyncPolicyScopeResultSelectorMock(IEnumerable<PolicyScopeMockConfiguration> configurations)
        {
            Configurations = configurations;
        }

        internal IEnumerable<PolicyScopeMockConfiguration> Configurations { get; } 

        public IAsyncServiceNoResultPolicyScopeRunner<T> WithNoResult()
        {
            var config = Configurations.FirstOrDefault(conf => conf.ReturnType == null);

            if(config == null)
            {
                throw new PolicyScopeMockException($"No matching policy scope mock configuration was found. Found no configuration with no result type.", Configurations);
            }

            return new AsyncServiceNoResultPolicyScopeRunnerMock<T>(config);
        }

        public IAsyncServiceResultPolicyScopeRunner<T, TResult> WithResult<TResult>()
        {
            var config = Configurations.FirstOrDefault(conf => conf.ReturnType == typeof(TResult));

            if (config == null)
            {
                throw new PolicyScopeMockException($"No matching policy scope mock configuration was found. Found no configuration with result type {typeof(TResult)}.", Configurations);
            }

            return new AsyncServiceResultPolicyScopeRunnerMock<T, TResult>(config);
        }
    }

    internal class AsyncPolicyScopeResultSelectorMock<T1, T2> : IAsyncPolicyScopeResultSelector<T1, T2>
    {
        internal AsyncPolicyScopeResultSelectorMock(IEnumerable<PolicyScopeMockConfiguration> configurations)
        {
            Configurations = configurations;
        }

        internal IEnumerable<PolicyScopeMockConfiguration> Configurations { get; } 

        public IAsyncServiceNoResultPolicyScopeRunner<T1, T2> WithNoResult()
        {
            var config = Configurations.FirstOrDefault(conf => conf.ReturnType == null);

            if(config == null)
            {
                throw new PolicyScopeMockException($"No matching policy scope mock configuration was found. Found no configuration with no result type.", Configurations);
            }

            return new AsyncServiceNoResultPolicyScopeRunnerMock<T1, T2>(config);
        }

        public IAsyncServiceResultPolicyScopeRunner<T1, T2, TResult> WithResult<TResult>()
        {
            var config = Configurations.FirstOrDefault(conf => conf.ReturnType == typeof(TResult));

            if (config == null)
            {
                throw new PolicyScopeMockException($"No matching policy scope mock configuration was found. Found no configuration with result type {typeof(TResult)}.", Configurations);
            }

            return new AsyncServiceResultPolicyScopeRunnerMock<T1, T2, TResult>(config);
        }
    }

    internal class AsyncPolicyScopeResultSelectorMock<T1, T2, T3> : IAsyncPolicyScopeResultSelector<T1, T2, T3>
    {
        internal AsyncPolicyScopeResultSelectorMock(IEnumerable<PolicyScopeMockConfiguration> configurations)
        {
            Configurations = configurations;
        }

        internal IEnumerable<PolicyScopeMockConfiguration> Configurations { get; } 

        public IAsyncServiceNoResultPolicyScopeRunner<T1, T2, T3> WithNoResult()
        {
            var config = Configurations.FirstOrDefault(conf => conf.ReturnType == null);

            if(config == null)
            {
                throw new PolicyScopeMockException($"No matching policy scope mock configuration was found. Found no configuration with no result type.", Configurations);
            }

            return new AsyncServiceNoResultPolicyScopeRunnerMock<T1, T2, T3>(config);
        }

        public IAsyncServiceResultPolicyScopeRunner<T1, T2, T3, TResult> WithResult<TResult>()
        {
            var config = Configurations.FirstOrDefault(conf => conf.ReturnType == typeof(TResult));

            if (config == null)
            {
                throw new PolicyScopeMockException($"No matching policy scope mock configuration was found. Found no configuration with result type {typeof(TResult)}.", Configurations);
            }

            return new AsyncServiceResultPolicyScopeRunnerMock<T1, T2, T3, TResult>(config);
        }
    }

    internal class AsyncPolicyScopeResultSelectorMock<T1, T2, T3, T4> : IAsyncPolicyScopeResultSelector<T1, T2, T3, T4>
    {
        internal AsyncPolicyScopeResultSelectorMock(IEnumerable<PolicyScopeMockConfiguration> configurations)
        {
            Configurations = configurations;
        }

        internal IEnumerable<PolicyScopeMockConfiguration> Configurations { get; } 

        public IAsyncServiceNoResultPolicyScopeRunner<T1, T2, T3, T4> WithNoResult()
        {
            var config = Configurations.FirstOrDefault(conf => conf.ReturnType == null);

            if(config == null)
            {
                throw new PolicyScopeMockException($"No matching policy scope mock configuration was found. Found no configuration with no result type.", Configurations);
            }

            return new AsyncServiceNoResultPolicyScopeRunnerMock<T1, T2, T3, T4>(config);
        }

        public IAsyncServiceResultPolicyScopeRunner<T1, T2, T3, T4, TResult> WithResult<TResult>()
        {
            var config = Configurations.FirstOrDefault(conf => conf.ReturnType == typeof(TResult));

            if (config == null)
            {
                throw new PolicyScopeMockException($"No matching policy scope mock configuration was found. Found no configuration with result type {typeof(TResult)}.", Configurations);
            }

            return new AsyncServiceResultPolicyScopeRunnerMock<T1, T2, T3, T4, TResult>(config);
        }
    }

    internal class SyncPolicyScopeResultSelectorMock : ISyncPolicyScopeResultSelector
    {
        internal SyncPolicyScopeResultSelectorMock(IEnumerable<PolicyScopeMockConfiguration> configurations)
        {
            Configurations = configurations;
        }

        internal IEnumerable<PolicyScopeMockConfiguration> Configurations { get; } 

        public ISyncNoServiceNoResultPolicyScopeRunner WithNoResult()
        {
            var config = Configurations.FirstOrDefault(conf => conf.ReturnType == null);

            if(config == null)
            {
                throw new PolicyScopeMockException($"No matching policy scope mock configuration was found. Found no configuration with no result type.", Configurations);
            }

            return new SyncNoServiceNoResultPolicyScopeRunnerMock(config);
        }

        public ISyncNoServiceResultPolicyScopeRunner<TResult> WithResult<TResult>()
        {
            var config = Configurations.FirstOrDefault(conf => conf.ReturnType == typeof(TResult));

            if (config == null)
            {
                throw new PolicyScopeMockException($"No matching policy scope mock configuration was found. Found no configuration with result type {typeof(TResult)}.", Configurations);
            }

            return new SyncNoServiceResultPolicyScopeRunnerMock<TResult>(config);
        }
    }

    internal class SyncPolicyScopeResultSelectorMock<T> : ISyncPolicyScopeResultSelector<T>
    {
        internal SyncPolicyScopeResultSelectorMock(IEnumerable<PolicyScopeMockConfiguration> configurations)
        {
            Configurations = configurations;
        }

        internal IEnumerable<PolicyScopeMockConfiguration> Configurations { get; } 

        public ISyncServiceNoResultPolicyScopeRunner<T> WithNoResult()
        {
            var config = Configurations.FirstOrDefault(conf => conf.ReturnType == null);

            if(config == null)
            {
                throw new PolicyScopeMockException($"No matching policy scope mock configuration was found. Found no configuration with no result type.", Configurations);
            }

            return new SyncServiceNoResultPolicyScopeRunnerMock<T>(config);
        }

        public ISyncServiceResultPolicyScopeRunner<T, TResult> WithResult<TResult>()
        {
            var config = Configurations.FirstOrDefault(conf => conf.ReturnType == typeof(TResult));

            if (config == null)
            {
                throw new PolicyScopeMockException($"No matching policy scope mock configuration was found. Found no configuration with result type {typeof(TResult)}.", Configurations);
            }

            return new SyncServiceResultPolicyScopeRunnerMock<T, TResult>(config);
        }
    }

    internal class SyncPolicyScopeResultSelectorMock<T1, T2> : ISyncPolicyScopeResultSelector<T1, T2>
    {
        internal SyncPolicyScopeResultSelectorMock(IEnumerable<PolicyScopeMockConfiguration> configurations)
        {
            Configurations = configurations;
        }

        internal IEnumerable<PolicyScopeMockConfiguration> Configurations { get; } 

        public ISyncServiceNoResultPolicyScopeRunner<T1, T2> WithNoResult()
        {
            var config = Configurations.FirstOrDefault(conf => conf.ReturnType == null);

            if(config == null)
            {
                throw new PolicyScopeMockException($"No matching policy scope mock configuration was found. Found no configuration with no result type.", Configurations);
            }

            return new SyncServiceNoResultPolicyScopeRunnerMock<T1, T2>(config);
        }

        public ISyncServiceResultPolicyScopeRunner<T1, T2, TResult> WithResult<TResult>()
        {
            var config = Configurations.FirstOrDefault(conf => conf.ReturnType == typeof(TResult));

            if (config == null)
            {
                throw new PolicyScopeMockException($"No matching policy scope mock configuration was found. Found no configuration with result type {typeof(TResult)}.", Configurations);
            }

            return new SyncServiceResultPolicyScopeRunnerMock<T1, T2, TResult>(config);
        }
    }

    internal class SyncPolicyScopeResultSelectorMock<T1, T2, T3> : ISyncPolicyScopeResultSelector<T1, T2, T3>
    {
        internal SyncPolicyScopeResultSelectorMock(IEnumerable<PolicyScopeMockConfiguration> configurations)
        {
            Configurations = configurations;
        }

        internal IEnumerable<PolicyScopeMockConfiguration> Configurations { get; } 

        public ISyncServiceNoResultPolicyScopeRunner<T1, T2, T3> WithNoResult()
        {
            var config = Configurations.FirstOrDefault(conf => conf.ReturnType == null);

            if(config == null)
            {
                throw new PolicyScopeMockException($"No matching policy scope mock configuration was found. Found no configuration with no result type.", Configurations);
            }

            return new SyncServiceNoResultPolicyScopeRunnerMock<T1, T2, T3>(config);
        }

        public ISyncServiceResultPolicyScopeRunner<T1, T2, T3, TResult> WithResult<TResult>()
        {
            var config = Configurations.FirstOrDefault(conf => conf.ReturnType == typeof(TResult));

            if (config == null)
            {
                throw new PolicyScopeMockException($"No matching policy scope mock configuration was found. Found no configuration with result type {typeof(TResult)}.", Configurations);
            }

            return new SyncServiceResultPolicyScopeRunnerMock<T1, T2, T3, TResult>(config);
        }
    }

    internal class SyncPolicyScopeResultSelectorMock<T1, T2, T3, T4> : ISyncPolicyScopeResultSelector<T1, T2, T3, T4>
    {
        internal SyncPolicyScopeResultSelectorMock(IEnumerable<PolicyScopeMockConfiguration> configurations)
        {
            Configurations = configurations;
        }

        internal IEnumerable<PolicyScopeMockConfiguration> Configurations { get; } 

        public ISyncServiceNoResultPolicyScopeRunner<T1, T2, T3, T4> WithNoResult()
        {
            var config = Configurations.FirstOrDefault(conf => conf.ReturnType == null);

            if(config == null)
            {
                throw new PolicyScopeMockException($"No matching policy scope mock configuration was found. Found no configuration with no result type.", Configurations);
            }

            return new SyncServiceNoResultPolicyScopeRunnerMock<T1, T2, T3, T4>(config);
        }

        public ISyncServiceResultPolicyScopeRunner<T1, T2, T3, T4, TResult> WithResult<TResult>()
        {
            var config = Configurations.FirstOrDefault(conf => conf.ReturnType == typeof(TResult));

            if (config == null)
            {
                throw new PolicyScopeMockException($"No matching policy scope mock configuration was found. Found no configuration with result type {typeof(TResult)}.", Configurations);
            }

            return new SyncServiceResultPolicyScopeRunnerMock<T1, T2, T3, T4, TResult>(config);
        }
    }

}
