// This file has been autogenerated via
// Pekspro.PolicyScope.CodeGenerator.Test.Mock.UnitTestServiceNotFoundGenerator

using Moq;
using Pekspro.PolicyScope.LogicTest;
using Pekspro.PolicyScope.LogicTest.Services;
using Pekspro.PolicyScope.LogicTest.Workers;
using Pekspro.PolicyScope.Mock;
using System.Threading.Tasks;
using Xunit;

namespace Pekspro.PolicyScope.Test.Mock
{
    public class UnitTestServiceNotFound
    {
        [Fact]
        public async Task TestRunWithNoResultNoServiceAsync()
        {
             // Arrange
            Mock<IDummyService1> dummyServiceMock1 = new Mock<IDummyService1>();
            dummyServiceMock1
                .Setup(d => d.CalculateAsync())
                .Returns(Task.FromResult(1 << 0));

            var policyScopeMock = PolicyScopeMock
                            .AsyncPolicy(PolicyNames.AsyncPolicyName)
                            .WithService(dummyServiceMock1.Object)
                            .WithNoResult()
                            .Build();

            Logic logic = new Logic(policyScopeMock.Object);

            // Act and assert
            await Assert.ThrowsAsync<PolicyScopeMockException>(async () =>
            {
                await logic.RunWithNoResultNoServiceAsync();
            });
        }

        [Fact]
        public async Task TestRunWithNoResult1ServiceAsync()
        {
             // Arrange
            Mock<IDummyService1> dummyServiceMock1 = new Mock<IDummyService1>();
            dummyServiceMock1
                .Setup(d => d.CalculateAsync())
                .Returns(Task.FromResult(1 << 0));

            var policyScopeMock = PolicyScopeMock
                            .AsyncPolicy(PolicyNames.AsyncPolicyName)
                            .WithNoService()
                            .WithNoResult()
                            .Build();

            Logic logic = new Logic(policyScopeMock.Object);

            // Act and assert
            await Assert.ThrowsAsync<PolicyScopeMockException>(async () =>
            {
                await logic.RunWithNoResult1ServiceAsync();
            });
        }

        [Fact]
        public async Task TestRunWithNoResult2ServiceAsync()
        {
             // Arrange
            Mock<IDummyService1> dummyServiceMock1 = new Mock<IDummyService1>();
            dummyServiceMock1
                .Setup(d => d.CalculateAsync())
                .Returns(Task.FromResult(1 << 0));

            Mock<IDummyService2> dummyServiceMock2 = new Mock<IDummyService2>();
            dummyServiceMock2
                .Setup(d => d.CalculateAsync())
                .Returns(Task.FromResult(1 << 1));

            var policyScopeMock = PolicyScopeMock
                            .AsyncPolicy(PolicyNames.AsyncPolicyName)
                            .WithNoService()
                            .WithNoResult()
                            .Build();

            Logic logic = new Logic(policyScopeMock.Object);

            // Act and assert
            await Assert.ThrowsAsync<PolicyScopeMockException>(async () =>
            {
                await logic.RunWithNoResult2ServiceAsync();
            });
        }

        [Fact]
        public async Task TestRunWithNoResult3ServiceAsync()
        {
             // Arrange
            Mock<IDummyService1> dummyServiceMock1 = new Mock<IDummyService1>();
            dummyServiceMock1
                .Setup(d => d.CalculateAsync())
                .Returns(Task.FromResult(1 << 0));

            Mock<IDummyService2> dummyServiceMock2 = new Mock<IDummyService2>();
            dummyServiceMock2
                .Setup(d => d.CalculateAsync())
                .Returns(Task.FromResult(1 << 1));

            Mock<IDummyService3> dummyServiceMock3 = new Mock<IDummyService3>();
            dummyServiceMock3
                .Setup(d => d.CalculateAsync())
                .Returns(Task.FromResult(1 << 2));

            var policyScopeMock = PolicyScopeMock
                            .AsyncPolicy(PolicyNames.AsyncPolicyName)
                            .WithNoService()
                            .WithNoResult()
                            .Build();

            Logic logic = new Logic(policyScopeMock.Object);

            // Act and assert
            await Assert.ThrowsAsync<PolicyScopeMockException>(async () =>
            {
                await logic.RunWithNoResult3ServiceAsync();
            });
        }

        [Fact]
        public async Task TestRunWithNoResult4ServiceAsync()
        {
             // Arrange
            Mock<IDummyService1> dummyServiceMock1 = new Mock<IDummyService1>();
            dummyServiceMock1
                .Setup(d => d.CalculateAsync())
                .Returns(Task.FromResult(1 << 0));

            Mock<IDummyService2> dummyServiceMock2 = new Mock<IDummyService2>();
            dummyServiceMock2
                .Setup(d => d.CalculateAsync())
                .Returns(Task.FromResult(1 << 1));

            Mock<IDummyService3> dummyServiceMock3 = new Mock<IDummyService3>();
            dummyServiceMock3
                .Setup(d => d.CalculateAsync())
                .Returns(Task.FromResult(1 << 2));

            Mock<IDummyService4> dummyServiceMock4 = new Mock<IDummyService4>();
            dummyServiceMock4
                .Setup(d => d.CalculateAsync())
                .Returns(Task.FromResult(1 << 3));

            var policyScopeMock = PolicyScopeMock
                            .AsyncPolicy(PolicyNames.AsyncPolicyName)
                            .WithNoService()
                            .WithNoResult()
                            .Build();

            Logic logic = new Logic(policyScopeMock.Object);

            // Act and assert
            await Assert.ThrowsAsync<PolicyScopeMockException>(async () =>
            {
                await logic.RunWithNoResult4ServiceAsync();
            });
        }

        [Fact]
        public async Task TestRunWithResultNoServiceAsync()
        {
             // Arrange
            Mock<IDummyService1> dummyServiceMock1 = new Mock<IDummyService1>();
            dummyServiceMock1
                .Setup(d => d.CalculateAsync())
                .Returns(Task.FromResult(1 << 0));

            var policyScopeMock = PolicyScopeMock
                            .AsyncPolicy(PolicyNames.AsyncPolicyName)
                            .WithService(dummyServiceMock1.Object)
                            .WithResultType<int>()
                            .Build();

            Logic logic = new Logic(policyScopeMock.Object);

            // Act and assert
            await Assert.ThrowsAsync<PolicyScopeMockException>(async () =>
            {
                int result = await logic.RunWithResultNoServiceAsync();
            });
        }

        [Fact]
        public async Task TestRunWithResult1ServiceAsync()
        {
             // Arrange
            Mock<IDummyService1> dummyServiceMock1 = new Mock<IDummyService1>();
            dummyServiceMock1
                .Setup(d => d.CalculateAsync())
                .Returns(Task.FromResult(1 << 0));

            var policyScopeMock = PolicyScopeMock
                            .AsyncPolicy(PolicyNames.AsyncPolicyName)
                            .WithNoService()
                            .WithResultType<int>()
                            .Build();

            Logic logic = new Logic(policyScopeMock.Object);

            // Act and assert
            await Assert.ThrowsAsync<PolicyScopeMockException>(async () =>
            {
                int result = await logic.RunWithResult1ServiceAsync();
            });
        }

        [Fact]
        public async Task TestRunWithResult2ServiceAsync()
        {
             // Arrange
            Mock<IDummyService1> dummyServiceMock1 = new Mock<IDummyService1>();
            dummyServiceMock1
                .Setup(d => d.CalculateAsync())
                .Returns(Task.FromResult(1 << 0));

            Mock<IDummyService2> dummyServiceMock2 = new Mock<IDummyService2>();
            dummyServiceMock2
                .Setup(d => d.CalculateAsync())
                .Returns(Task.FromResult(1 << 1));

            var policyScopeMock = PolicyScopeMock
                            .AsyncPolicy(PolicyNames.AsyncPolicyName)
                            .WithNoService()
                            .WithResultType<int>()
                            .Build();

            Logic logic = new Logic(policyScopeMock.Object);

            // Act and assert
            await Assert.ThrowsAsync<PolicyScopeMockException>(async () =>
            {
                int result = await logic.RunWithResult2ServiceAsync();
            });
        }

        [Fact]
        public async Task TestRunWithResult3ServiceAsync()
        {
             // Arrange
            Mock<IDummyService1> dummyServiceMock1 = new Mock<IDummyService1>();
            dummyServiceMock1
                .Setup(d => d.CalculateAsync())
                .Returns(Task.FromResult(1 << 0));

            Mock<IDummyService2> dummyServiceMock2 = new Mock<IDummyService2>();
            dummyServiceMock2
                .Setup(d => d.CalculateAsync())
                .Returns(Task.FromResult(1 << 1));

            Mock<IDummyService3> dummyServiceMock3 = new Mock<IDummyService3>();
            dummyServiceMock3
                .Setup(d => d.CalculateAsync())
                .Returns(Task.FromResult(1 << 2));

            var policyScopeMock = PolicyScopeMock
                            .AsyncPolicy(PolicyNames.AsyncPolicyName)
                            .WithNoService()
                            .WithResultType<int>()
                            .Build();

            Logic logic = new Logic(policyScopeMock.Object);

            // Act and assert
            await Assert.ThrowsAsync<PolicyScopeMockException>(async () =>
            {
                int result = await logic.RunWithResult3ServiceAsync();
            });
        }

        [Fact]
        public async Task TestRunWithResult4ServiceAsync()
        {
             // Arrange
            Mock<IDummyService1> dummyServiceMock1 = new Mock<IDummyService1>();
            dummyServiceMock1
                .Setup(d => d.CalculateAsync())
                .Returns(Task.FromResult(1 << 0));

            Mock<IDummyService2> dummyServiceMock2 = new Mock<IDummyService2>();
            dummyServiceMock2
                .Setup(d => d.CalculateAsync())
                .Returns(Task.FromResult(1 << 1));

            Mock<IDummyService3> dummyServiceMock3 = new Mock<IDummyService3>();
            dummyServiceMock3
                .Setup(d => d.CalculateAsync())
                .Returns(Task.FromResult(1 << 2));

            Mock<IDummyService4> dummyServiceMock4 = new Mock<IDummyService4>();
            dummyServiceMock4
                .Setup(d => d.CalculateAsync())
                .Returns(Task.FromResult(1 << 3));

            var policyScopeMock = PolicyScopeMock
                            .AsyncPolicy(PolicyNames.AsyncPolicyName)
                            .WithNoService()
                            .WithResultType<int>()
                            .Build();

            Logic logic = new Logic(policyScopeMock.Object);

            // Act and assert
            await Assert.ThrowsAsync<PolicyScopeMockException>(async () =>
            {
                int result = await logic.RunWithResult4ServiceAsync();
            });
        }

        [Fact]
        public void TestRunWithNoResultNoService()
        {
             // Arrange
            Mock<IDummyService1> dummyServiceMock1 = new Mock<IDummyService1>();
            dummyServiceMock1
                .Setup(d => d.Calculate())
                .Returns(1 << 0);

            var policyScopeMock = PolicyScopeMock
                            .SyncPolicy(PolicyNames.SyncPolicyName)
                            .WithService(dummyServiceMock1.Object)
                            .WithNoResult()
                            .Build();

            Logic logic = new Logic(policyScopeMock.Object);

            // Act and assert
            Assert.Throws<PolicyScopeMockException>(() =>
            {
                logic.RunWithNoResultNoService();
            });
        }

        [Fact]
        public void TestRunWithNoResult1Service()
        {
             // Arrange
            Mock<IDummyService1> dummyServiceMock1 = new Mock<IDummyService1>();
            dummyServiceMock1
                .Setup(d => d.Calculate())
                .Returns(1 << 0);

            var policyScopeMock = PolicyScopeMock
                            .SyncPolicy(PolicyNames.SyncPolicyName)
                            .WithNoService()
                            .WithNoResult()
                            .Build();

            Logic logic = new Logic(policyScopeMock.Object);

            // Act and assert
            Assert.Throws<PolicyScopeMockException>(() =>
            {
                logic.RunWithNoResult1Service();
            });
        }

        [Fact]
        public void TestRunWithNoResult2Service()
        {
             // Arrange
            Mock<IDummyService1> dummyServiceMock1 = new Mock<IDummyService1>();
            dummyServiceMock1
                .Setup(d => d.Calculate())
                .Returns(1 << 0);

            Mock<IDummyService2> dummyServiceMock2 = new Mock<IDummyService2>();
            dummyServiceMock2
                .Setup(d => d.Calculate())
                .Returns(1 << 1);

            var policyScopeMock = PolicyScopeMock
                            .SyncPolicy(PolicyNames.SyncPolicyName)
                            .WithNoService()
                            .WithNoResult()
                            .Build();

            Logic logic = new Logic(policyScopeMock.Object);

            // Act and assert
            Assert.Throws<PolicyScopeMockException>(() =>
            {
                logic.RunWithNoResult2Service();
            });
        }

        [Fact]
        public void TestRunWithNoResult3Service()
        {
             // Arrange
            Mock<IDummyService1> dummyServiceMock1 = new Mock<IDummyService1>();
            dummyServiceMock1
                .Setup(d => d.Calculate())
                .Returns(1 << 0);

            Mock<IDummyService2> dummyServiceMock2 = new Mock<IDummyService2>();
            dummyServiceMock2
                .Setup(d => d.Calculate())
                .Returns(1 << 1);

            Mock<IDummyService3> dummyServiceMock3 = new Mock<IDummyService3>();
            dummyServiceMock3
                .Setup(d => d.Calculate())
                .Returns(1 << 2);

            var policyScopeMock = PolicyScopeMock
                            .SyncPolicy(PolicyNames.SyncPolicyName)
                            .WithNoService()
                            .WithNoResult()
                            .Build();

            Logic logic = new Logic(policyScopeMock.Object);

            // Act and assert
            Assert.Throws<PolicyScopeMockException>(() =>
            {
                logic.RunWithNoResult3Service();
            });
        }

        [Fact]
        public void TestRunWithNoResult4Service()
        {
             // Arrange
            Mock<IDummyService1> dummyServiceMock1 = new Mock<IDummyService1>();
            dummyServiceMock1
                .Setup(d => d.Calculate())
                .Returns(1 << 0);

            Mock<IDummyService2> dummyServiceMock2 = new Mock<IDummyService2>();
            dummyServiceMock2
                .Setup(d => d.Calculate())
                .Returns(1 << 1);

            Mock<IDummyService3> dummyServiceMock3 = new Mock<IDummyService3>();
            dummyServiceMock3
                .Setup(d => d.Calculate())
                .Returns(1 << 2);

            Mock<IDummyService4> dummyServiceMock4 = new Mock<IDummyService4>();
            dummyServiceMock4
                .Setup(d => d.Calculate())
                .Returns(1 << 3);

            var policyScopeMock = PolicyScopeMock
                            .SyncPolicy(PolicyNames.SyncPolicyName)
                            .WithNoService()
                            .WithNoResult()
                            .Build();

            Logic logic = new Logic(policyScopeMock.Object);

            // Act and assert
            Assert.Throws<PolicyScopeMockException>(() =>
            {
                logic.RunWithNoResult4Service();
            });
        }

        [Fact]
        public void TestRunWithResultNoService()
        {
             // Arrange
            Mock<IDummyService1> dummyServiceMock1 = new Mock<IDummyService1>();
            dummyServiceMock1
                .Setup(d => d.Calculate())
                .Returns(1 << 0);

            var policyScopeMock = PolicyScopeMock
                            .SyncPolicy(PolicyNames.SyncPolicyName)
                            .WithService(dummyServiceMock1.Object)
                            .WithResultType<int>()
                            .Build();

            Logic logic = new Logic(policyScopeMock.Object);

            // Act and assert
            Assert.Throws<PolicyScopeMockException>(() =>
            {
                int result = logic.RunWithResultNoService();
            });
        }

        [Fact]
        public void TestRunWithResult1Service()
        {
             // Arrange
            Mock<IDummyService1> dummyServiceMock1 = new Mock<IDummyService1>();
            dummyServiceMock1
                .Setup(d => d.Calculate())
                .Returns(1 << 0);

            var policyScopeMock = PolicyScopeMock
                            .SyncPolicy(PolicyNames.SyncPolicyName)
                            .WithNoService()
                            .WithResultType<int>()
                            .Build();

            Logic logic = new Logic(policyScopeMock.Object);

            // Act and assert
            Assert.Throws<PolicyScopeMockException>(() =>
            {
                int result = logic.RunWithResult1Service();
            });
        }

        [Fact]
        public void TestRunWithResult2Service()
        {
             // Arrange
            Mock<IDummyService1> dummyServiceMock1 = new Mock<IDummyService1>();
            dummyServiceMock1
                .Setup(d => d.Calculate())
                .Returns(1 << 0);

            Mock<IDummyService2> dummyServiceMock2 = new Mock<IDummyService2>();
            dummyServiceMock2
                .Setup(d => d.Calculate())
                .Returns(1 << 1);

            var policyScopeMock = PolicyScopeMock
                            .SyncPolicy(PolicyNames.SyncPolicyName)
                            .WithNoService()
                            .WithResultType<int>()
                            .Build();

            Logic logic = new Logic(policyScopeMock.Object);

            // Act and assert
            Assert.Throws<PolicyScopeMockException>(() =>
            {
                int result = logic.RunWithResult2Service();
            });
        }

        [Fact]
        public void TestRunWithResult3Service()
        {
             // Arrange
            Mock<IDummyService1> dummyServiceMock1 = new Mock<IDummyService1>();
            dummyServiceMock1
                .Setup(d => d.Calculate())
                .Returns(1 << 0);

            Mock<IDummyService2> dummyServiceMock2 = new Mock<IDummyService2>();
            dummyServiceMock2
                .Setup(d => d.Calculate())
                .Returns(1 << 1);

            Mock<IDummyService3> dummyServiceMock3 = new Mock<IDummyService3>();
            dummyServiceMock3
                .Setup(d => d.Calculate())
                .Returns(1 << 2);

            var policyScopeMock = PolicyScopeMock
                            .SyncPolicy(PolicyNames.SyncPolicyName)
                            .WithNoService()
                            .WithResultType<int>()
                            .Build();

            Logic logic = new Logic(policyScopeMock.Object);

            // Act and assert
            Assert.Throws<PolicyScopeMockException>(() =>
            {
                int result = logic.RunWithResult3Service();
            });
        }

        [Fact]
        public void TestRunWithResult4Service()
        {
             // Arrange
            Mock<IDummyService1> dummyServiceMock1 = new Mock<IDummyService1>();
            dummyServiceMock1
                .Setup(d => d.Calculate())
                .Returns(1 << 0);

            Mock<IDummyService2> dummyServiceMock2 = new Mock<IDummyService2>();
            dummyServiceMock2
                .Setup(d => d.Calculate())
                .Returns(1 << 1);

            Mock<IDummyService3> dummyServiceMock3 = new Mock<IDummyService3>();
            dummyServiceMock3
                .Setup(d => d.Calculate())
                .Returns(1 << 2);

            Mock<IDummyService4> dummyServiceMock4 = new Mock<IDummyService4>();
            dummyServiceMock4
                .Setup(d => d.Calculate())
                .Returns(1 << 3);

            var policyScopeMock = PolicyScopeMock
                            .SyncPolicy(PolicyNames.SyncPolicyName)
                            .WithNoService()
                            .WithResultType<int>()
                            .Build();

            Logic logic = new Logic(policyScopeMock.Object);

            // Act and assert
            Assert.Throws<PolicyScopeMockException>(() =>
            {
                int result = logic.RunWithResult4Service();
            });
        }
    }
}
